import type { Metadata } from "next";
import localFont from "next/font/local";
import { Readex_Pro } from "next/font/google";
import "../globals.css";
import { getLangDir, isRtl } from "@/utils/i18n";
import { hasLocale, NextIntlClientProvider } from "next-intl";
import { routing } from "@/i18n/routing";
import { notFound } from "next/navigation";
import NavBar from "@/components/NavBar";
import Providers from "@/components/Providers";

const neueMontreal = localFont({
  src: [
    {
      path: "../../../public/Neue Montreal/NeueMontreal-Light.otf",
      weight: "100",
      style: "normal",
    },
    {
      path: "../../../public/Neue Montreal/NeueMontreal-Light.otf",
      weight: "100",
      style: "italic",
    },
    {
      path: "../../../public/Neue Montreal/NeueMontreal-Regular.otf",
      weight: "400",
      style: "normal",
    },
    {
      path: "../../../public/Neue Montreal/NeueMontreal-Italic.otf",
      weight: "400",
      style: "italic",
    },
    {
      path: "../../../public/Neue Montreal/NeueMontreal-Medium.otf",
      weight: "500",
      style: "normal",
    },
    {
      path: "../../../public/Neue Montreal/NeueMontreal-MediumItalic.otf",
      weight: "500",
      style: "italic",
    },
    {
      path: "../../../public/Neue Montreal/NeueMontreal-Bold.otf",
      weight: "700",
      style: "normal",
    },
    {
      path: "../../../public/Neue Montreal/NeueMontreal-BoldItalic.otf",
      weight: "700",
      style: "italic",
    },
  ],
  variable: "--font-neue-montreal",
  display: "swap",
});

const readexPro = Readex_Pro({
  variable: "--font-readex-pro",
  weight: ["200", "300", "400", "500", "600", "700"],
  subsets: ["arabic"],
});

const reckless = localFont({
  src: [
    {
      path: "../../../public/RecklessNeue/RecklessNeue-Thin.ttf",
      style: "normal",
      weight: "100",
    },
    {
      path: "../../../public/RecklessNeue/RecklessNeue-ThinItalic.ttf",
      style: "itlic",
      weight: "100",
    },
    {
      path: "../../../public/RecklessNeue/RecklessNeue-Regular.ttf",
      style: "normal",
      weight: "400",
    },
    {
      path: "../../../public/RecklessNeue/RecklessNeue-RegularItalic.ttf",
      style: "italic",
      weight: "400",
    },
    {
      path: "../../../public/RecklessNeue/RecklessNeue-Bold.ttf",
      style: "normal",
      weight: "700",
    },
    {
      path: "../../../public/RecklessNeue/RecklessNeue-BoldItalic.ttf",
      style: "italic",
      weight: "700",
    },
  ],
  variable: "--font-reckless-neue",
  display: "swap",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  params,
  children,
}: Readonly<{
  params: Promise<{ locale: string }>;
  children: React.ReactNode;
}>) {
  // Ensure incoming `locale` is valid
  const { locale } = await params;
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }
  const dir = getLangDir(locale);
  // TODO: add arabic font for he arabic text as well

  return (
    <html lang={locale} dir={dir}>
      <body
        className={`${neueMontreal.variable} ${readexPro.variable} ${reckless.variable} antialiased`}
      >
        {/* it would throw an error if the parent is client component */}
        <NextIntlClientProvider>
          <Providers>
            <header
              className={`content-grid ${isRtl(locale) ? "font-rdx font-light" : "font-neue"} text-white`}
            >
              <NavBar />
            </header>
            <main
              className={`content-grid ${isRtl(locale) ? "font-rdx font-light" : "font-neue"} text-white`}
            >
              {children}
            </main>
          </Providers>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
